## Dynamic variables



### VERSION 2 ###

export base class jtoken
public
	override func dyn(expr: expression)
		let v = new jtoken_dynamic_resolver(this)
		expression.accept(v)
		return v.result

export class jarray inherits jtoken
public
	operator this[index: int]
		get => at(index)
		set => at(index, value)

export class jobject inherits jtoken
public
	operator this[key: string]
		get => property(key)
		set => upsert(key, value)

### VERSION 1 ###

import std.text.json

base class jtoken
public:
	## required for dynamic variables to get/set "properties"
	## it is not necessary to apply the storage modifier "dyn"
	## it's is included to allow for nested dynamic objects.
	operator this[key: string] -> dyn jtoken:
		get => ...
		set => ...

	operator this[index: int] -> dyn jtoken:
		get => ...
		set => ...

class jobject inherits jtoken

func json_jobject_example:
	## create a new dynamic jobject
	dyn obj = new jobject

	## add properties to dynamic jobject
	obj.firstname = "reegan"
	obj.surname = "layzell"

	## nested dynamic jobjects.
	## as the type of jobject's subscript
	## operator is dynamic, this is allowed.
	obj.details = new jobject
	obj.details.foo = "string"

	## print jobject json
	println("$obj")

func object_literal_example:
	## Initializing a dynamic variable with an object literal
	## creates a dynamic anonymous object. Dynamic anonymous objects include
	## the necessary subscript operator to support adding properties dynamically.
	dyn obj = {}
	obj.id = 1
	obj.details = {}
	obj.details.list = [1, 2, 3]

## Possiblity????
func array_literal_example:
	## Initializing a dynamic variable with an array literal
	## creates a `list` of type `T` rather than a fixed length array
	## in other words, a 'dynamic array'.
	dyn xs = [1, 2, 3]
	xs.append(4)
	xs.append(5)
	xs.append(6)

func hashmap_example:
	## as hashmaps with string keys provide the required
	## subscript operator, they can also use the dynamic feature of
	## adding key/value pairs with property get/set syntax.
	dyn kvs = new hashmap<string, int>()
	kvs.key1 = 10
	kvs.key2 = 20
	kvs.key3 = 30