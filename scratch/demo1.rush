## Rush Programming Language Demo
## This is a comment.

import std.io
import std.math

func sqrt(x: float) -> float
func println(args: ...string) -> void

struct vector2
public
   let x, y: float
   get length => sqrt(dot(this, this))

   default => this(0, 0)

   construct (x, y: float)
      this.x = x
      this.y = y

   operator +this => new vector2(+x, +y)
   operator -this => new vector2(-x, -y)

   operator this + (rhs: vector2) => new vector2(x + rhs.x, y + rhs.y)
   operator this - (rhs: vector2) => new vector2(x - rhs.x, y - rhs.y)

   operator this * (k: float) => new vector2(x * k, y * k)
   operator this / (k: float) => new vector2(x / k, y / k)

   ## commutative property of multiplication.
   operator (k: float) * this => this * k


func to_string({x, y}: @vector2) => "($x, $y)"

func dot(u, v: @vector2)
   let dx = u.x * v.x
   let dy = u.y * v.y
   return dx + dy

func main
   let u = new vector2(1, 0)
   if u.length == 1
      println("$u is unit length.")
   else
      println("$u is not unit length.")

   let vs = [
      new vector2(0, 2),
      new vector2(1, 1),
      new vector2(2, 0),
   ]

   for {x, y} in vs
      println("[$x, $y]")

   let sum = reduce(vs, (u, v) => u + v)

   ## ...
