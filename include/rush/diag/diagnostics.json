{
   "warnings": [
      {
         "kind": "syntax",
         "bracket": { "start": 1000, "end": 1099 },
         "messages": [
            { "name": "missing_semicolon", "text": "missing semi-colon after '{}'." }
         ]
      },
      {
         "kind": "semantic",
         "bracket": { "start": 1100, "end": 1199 },
         "messages": [
            { "name": "unused_local_variable", "text": "the variable '{}' is declared but never used.", "params": [ "name" ] },
            { "name": "unused_local_constant", "text": "the constant '{}' is declared but never used.", "params": [ "name" ] },
            { "name": "unused_global_variable", "text": "the global variable '{}' is declared but never used.", "params": [ "name" ] },
            { "name": "unused_global_constant", "text": "the global constant '{}' is declared but never used.", "params": [ "name" ] },
            { "name": "unused_internal_class", "text": "the class '{}' is declared but never used.", "params": [ "name" ] },
            { "name": "unused_internal_struct", "text": "the struct '{}' is declared but never used.", "params": [ "name" ] },
            { "name": "unused_internal_concept", "text": "the concept '{}' is declared but never used.", "params": [ "name" ] },
            { "name": "unused_internal_interface", "text": "the interface '{}' is declared but never used.", "params": [ "name" ] },
            { "name": "unused_internal_function", "text": "the function '{}' is declared but never used.", "params": [ "name" ] },
            { "name": "unused_private_field", "text": "the field '{}' in '{}' '{}' is declared but never used.", "params": [ "name", "kind", "type" ] },
            { "name": "unused_private_method", "text": "the method '{}' in '{}' '{}' is declared but never used.", "params": [ "name", "kind", "type" ] },
            { "name": "unused_private_property", "text": "the property '{}' in '{}' '{}' is declared but never used.", "params": [ "name", "kind", "type" ] }
         ]
      }
   ],
   "errors": [
      {
         "kind": "syntax",
         "bracket": { "start": 1000, "end": 1199 },
         "messages": [
            { "name": "internal_parse_error", "text": "internal error." },
            { "name": "not_supported", "text": "{1} is not supported.", "params": [ "feature" ] },
            { "name": "expected", "text": "expected '{1}' before '{0}'.", "params": [ "expected" ] },
            { "name": "expected_identifier", "text": "expected an identifier before '{}'." },
            { "name": "expected_primary_expr", "text": "expected primary expression, but found '{}'." },
            { "name": "expected_property_name", "text": "expected property name before '{}'." },
            { "name": "expected_function_decl", "text": "expected function declaration before '{}'." },
            { "name": "expected_function_name", "text": "expected function name before '{}'." },
            { "name": "expected_signature_or_body", "text": "expected function signature, or ':', or '=>' and subsequent body." },
            { "name": "expected_function_stmt_body", "text": "expected function statement body before '{}'." },
            { "name": "expected_function_expr_body", "text": "expected function expression body before '{}'." },
            { "name": "expected_class_decl", "text": "exepected class declaration before '{}'." },
            { "name": "expected_class_name", "text": "exepected class name before '{}'." },
            { "name": "expected_struct_name", "text": "exepected struct name before '{}'." },
            { "name": "unexpected_symbol_expr", "text": "unexpected symbol '{}' parsing primary expression." },
            { "name": "unexpected_keyword_expr", "text": "unexpected keyword '{}' parsing primary expression." },
            { "name": "expected_closing_bracket", "text": "expected a closing '}}' before '{}'." },
            { "name": "expected_closing_parenthesis", "text": "expected a closing ')' before '{}'." },
            { "name": "expected_closing_parenthesis_or_tuple", "text": "expected a closing ')' or ',' before '{}'." },
            { "name": "expected_closing_square_bracket", "text": "expected a closing ']' before '{}'." },
            { "name": "expected_closing_square_bracket_or_comma", "text": "expected a ',' or closing ']' before '{}'." },
            { "name": "expected_module_name", "text": "expected module name after import." },
            { "name": "expected_qualified_name", "text": "expected qualified name." },

            { "name": "expected_compound_stmt", "text": "expected compound statement before '{}'." },
            { "name": "expected_if_stmt_body", "text": "expected ':', and subsequent body of 'if' statement before '{}'." },
            { "name": "expected_else_stmt_body", "text": "expected ':', and subsequent body of 'else' statement before '{}'." },
            { "name": "expected_for_in_expr", "text": "expected 'in' keyword, and subsequent expression before '{}'." },
            { "name": "expected_for_stmt_body", "text": "expected ':', and subsequent body of 'for' statement before '{}'." },
            { "name": "expected_while_stmt_body", "text": "expected ':', and subsequent body of 'while' statement before '{}'." },
            { "name": "expected_type_annotation", "text": "expected type name or annotation before '{}'." },
            { "name": "expected_toplevel_decl", "text": "expected a type, function, or storage declaration." },
            { "name": "expected_member_decl", "text": "expected a type, method, property, or field declaration." },
            { "name": "expected_parameter_name", "text": "expected parameter identifier before '{}'." },
            { "name": "constant_requires_type_annotation", "text": "constant declaration '{}' requires either a type-annotation or intializer." },
            { "name": "variable_requires_type_annotation", "text": "variable declaration '{}' requires either a type-annotation or intializer." },
            { "name": "local_constant_name_previously_defined", "text": "local constant named '{}' is already defined in this scope." },
            { "name": "local_variable_name_previously_defined", "text": "local variable named '{}' is already defined in this scope." },
            { "name": "definition_already_exists", "text": "the current context already contains a definition for '{}'." },
            { "name": "parameter_redefinition", "text": "redefinition of parameter '{}'." },

            { "name": "constant_used_like_type", "text": "'{}' is a constant but is used like a type." },
            { "name": "variable_used_like_type", "text": "'{}' is a variable but is used like a type." },
            { "name": "function_used_like_type", "text": "'{}' is a function but is used like a type." },
            { "name": "template_string_parse_error", "text": "could not parse string template: {1}", "params": [ "errmsg" ] }
         ]
      },
      {
         "kind": "semantic",
         "bracket": { "start": 1200, "end": 1499 },
         "messages": [
            { "name": "type_not_found", "text": "the type '{}' could not be found." },
            { "name": "multiple_definitions", "text": "a definition for '{}' already exists.", "params": [ "name" ] },
            { "name": "multiple_member_definitions", "text": "the type '{}' already contains a definition for '{}'.", "params": [ "type", "name" ] },
            { "name": "undeclared_identifier", "text": "the name '{}' does not exist in the current context.", "params": [ "name" ]  },
            { "name": "unresolved_type", "text": "" },
            { "name": "irreducible_type", "text": "the types '{}' and '{}' do not share a common type.", "params": [ "first", "second" ] },
            { "name": "mismatched_type_assignment", "text": "the type '{}' cannot be assigned to an instance of '{}'.", "params": [ "first", "second" ] },
            { "name": "infinitely_recursive_return_type_deduction", "text": "deducing return type is infinitely recursive." }
         ]
      }
   ]
}
