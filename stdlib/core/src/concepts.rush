
## The only constraint of the 'any' concept is that the parameter
## be of it's type, this is true for all parameters and as such all
## types satisfy the 'any' constraint.
export concept any<T>(val: T) => val -> T
export concept hashable(arg: any) => hash(arg) -> uint

export concept equatable(lhs, rhs: any) => lhs == rhs -> bool
export concept orderable(lhs, rhs: any) => lhs  < rhs -> bool
export type comparable = equatable & orderable

concept parameterless_formattable(arg: any) => format(arg) -> string
concept parameterized_formattable(arg: any) => format(arg, @string) -> string
export type formattable = parameterless_formattable | parameterized_formattable

## formattable example:
## export func format(arg: parameterless_formattable) => format(arg)
## export func format(arg: parameterized_formattable, fmt: string) => format(arg, fmt)

## export func log(msg: string, args: ...formattable):
## 	let parts = parse_msg(msg)
## 	for p in parts:
## 		if p.type == "literal":
## 			append(p.value)
## 		else if p.type == "formatted":
## 			append(format(a))
## 		else if p.type == "param formatted"
## 			append(format(a, p.arg))


export concept signable(val: any):
   +val -> typeof val
   -val -> typeof val

export concept numerical(lhs: signable, rhs = lhs)
   requires comparable(lhs, rhs)

   lhs + rhs -> numerical
   lhs - rhs -> numerical
   lhs * rhs -> numerical
   lhs / rhs -> numerical

   lhs += rhs -> ref typeof lhs
   lhs -= rhs -> ref typeof lhs
   lhs *= rhs -> ref typeof lhs
   lhs /= rhs -> ref typeof lhs

export concept integral(lhs: numerical, rhs = lhs):
   ++lhs -> ref typeof lhs
   --lhs -> ref typeof lhs

   lhs % rhs -> integral
   lhs %= rhs -> ref typeof lhs

export concept floating(lhs: numerical, rhs = lhs):
   pow(lhs, rhs) -> floating

   sin(lhs) -> floating
   cos(lhs) -> floating
   tan(lhs) -> floating

   asin(lhs) -> floating
   acos(lhs) -> floating
   atan(lhs) -> floating

   sinh(lhs) -> floating
   cosh(lhs) -> floating
   tanh(lhs) -> floating

   sqrt(lhs) -> floating
   cbrt(lhs) -> floating

   log(lhs) -> floating
   log(lhs) -> floating
   exp(lhs) -> floating
   exp(lhs) -> floating
