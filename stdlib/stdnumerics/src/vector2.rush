import std.math

## Represents a 2-Dimensional Vector.
export data struct vector2(x, y: float)
   get length => sqrt(length_sqr)
   get length_sqr => dot(this, this)

	default => this(0, 0)

   implements formattable
      func format() => "($x, $y)"

   operator +this => new vector2(+x, +y)
	operator -this => new vector2(-x, -y)

   implements arithmetic
		operator this + (other: self) => new vector2(x + other.x, y + other.y)
		operator this - (other: self) => new vector2(x - other.x, y - other.y)

	implements arithmetic<(float, float)>
		operator this + ({x, y}: (float, float)) => new vector2(this.x + x, this.y + y)
		operator this - ({x, y}: (float, float)) => new vector2(this.x - x, this.y - y)

	implements arithmetic<float>
		operator this * (scalar: float) => new vector2(x * scalar, y * scalar)
		operator this / (scalar: float) => new vector2(x / scalar, y / scalar)

## Returns the dot product of two vectors.
export func dot(u, v: extends vector2)
   => u.x * v.x
    + u.y * v.y

## Returns a vector of unit length in the
## same direction as the vector specified.
export func normalized(vec: extends vector2) => vec / length

## Returns the scalar distance between two vectors
export func distance(u, v: vector2) => (v - u).length

## Returns the scalar distance squared between two vectors.
export func distance_sqr(u, v: vector2) => (v - u).length_sqr

## Returns the projection of a vector onto a
## straight line parallel to another vector.
export func project(vec, ray: vector2) => ray*(dot(vec, ray) / ray.length_sqr)

## Returns the reflection of a vector from a
## surface that has the specified normal
export func reflect(vec, norm: vector2) => vec - 2*project(vec, norm)

## Returns a vector with components equivalent to the minimum
## of each pair of components, of the two specified vectors.
export func min(u, v: vector2) => new vector2(
   min(u.x, v.x),
   min(u.y, v.y))

## Returns a vector with components equivalent to the maximum
## of each pair of components, of the two specified vectors.
export func max(u, v: vector2) => new vector2(
   max(u.x, v.x),
   max(u.y, v.y))
