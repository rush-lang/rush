import std.collections

export func each<T>(items: extends iterable<T>, action: (item: T) -> void)
   for item in items
      action(item)

export func each<T>(items: extends iterable<T>, action: (item: T) -> void)
   for item in items
      action(item)
      yield item

export func empty<T>(items: extends iterable<T>)
   return any_of(items, _ => noop)

export func all_of<T>(items: extends iterable<T>, predicate: (item: T) -> bool)
   for item in items
      if !predicate(item) return false
   return true

export func any_of<T>(items: extends iterable<T>, predicate: (item: T) -> bool)
   for item in items
      if predicate(item) return true
   return false

export func take<T>(var count: int, items: extends iterable<T>)
   let it = items.iterator()
   while count-- > 0 && it.next()
      yield it.value

export func take<T>(items: extends iterable<T>, predicate: (item: T) -> bool)
   let it = items.iterator()
   while it.next() && predicate(it.value)
      yield it.value

export func skip<T>(var count: int, items: extends iterable<T>)
   let it = items.iterator()
   while count-- > 0 && it.next()
   while it.next() yield it.value

export func skip<T>(items: extends iterable<T>, predicate: (item: T) -> bool)
   let it = items.iterator()
   while it.next() && predicate(it.value)
   while it.next() yield it.value

## brief: Projects each element of the items collection into a new form.
## type-params:
##   - T: The type of elements in the ${items} collection.
##   - R: The type returned by the ${transform} parameter
## params:
##   - items:   The items collection to map items from.
##   - transform: A function that maps items to the new form.
## returns: >-
##   An @{iterable<T>} whose items are the same type as the return
##   type of ${transform}.
export func map<T, R>(items: extends iterable<T>, transform: (item: T) -> R)
   for item in items
      yield transform(item)

export func flatmap<T, R>(items: extends iterable<T>, transform: (item: T) -> iterable<R>)
   for item in items
      for inner in transform(item)
         yield inner

export func filter<T>(items: extends iterable<T>, predicate: (item: T) -> bool)
   for item in items
      if predicate(item) yield item

export func reduce<T>(items: extends iterable<T>, collector: (result: T, item: T) -> T)
   return reduce(
      items.skip(1),
      items.first(), collector)

export func reduce<T, R>(items: extends iterable<T>, var init: R, collector: (result: R, item: T) -> R)
   for item in items
      init = collector(init, item)
   return init

func chunk_part<T>(iter: iterator<T>, var size: int)
   while iter.next() && size-- > 0
      yield iter.value

export func chunk<T>(items: extends iterable<T>, size: int)
   let it = items.iterator()
   while it.next()
      yield chunk_part(it, size)

export func partition<T>(items: extends iterable<T>, parts: int)
   => chunk(items, items.count() / parts + 1)

## interweaves the delim value between the collection of items.
export func lace<T>(items: extends iterable<T>, delim: T)
   let it = items.iterator()
   if it.next()
      yield it.value
      while it.next()
         yield delim
         yield it.value


export func first<T>(items: extends iterable<T>)
   let it = items.iterator()
   if !it.next()
      throw new sequence_error("The collection is empty.")
   return it.value


export func first<T>(items: extends iterable<T>, predicate: (item: T) -> bool)
   let it = items.iterator()
   if !it.next()
      throw new sequence_error("The collection is empty.")

   if predicate(it.value)
      return it.value

   while it.next()
      if predicate(it.value)
         return it.value

   throw new sequence_error("Item not found.")


export func last<T>(items: extends indexable<T>)
   if items.length == 0
      throw new sequence_error("The collection is empty.")

   return items[items.length - 1]


export func last<T>(items: extends iterable<T>)
   let it = items.iterator()
   if it.next() == false
      throw new sequence_error("The collection is empty.")

   while it.next()
   return it.value
