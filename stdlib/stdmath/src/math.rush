## @brief Returns the sine of an angle given in radians.
## @param x The angle.
## @return The sine of the angle in the range [-1, 1].
export extern func sin(x: float) -> float

## @brief Returns the cosine of an angle given in radians.
## @param x The angle.
## @return The cosine of the angle in the range [-1, 1].
export extern func cos(x: float) -> float

## @brief Returns the tangent of an angle given in radians.
## @param x The angle.
## @return The tangent of the angle in the range [-1, 1].
export extern func tan(x: float) -> float

export extern func sin(x: double) -> double
export extern func cos(x: double) -> double
export extern func tan(x: double) -> double

export extern func asin(x: float) -> float
export extern func acos(x: float) -> float
export extern func atan(x: float) -> float

export extern func asin(x: double) -> double
export extern func acos(x: double) -> double
export extern func atan(x: double) -> double

export extern func sinh(x: float) -> float
export extern func cosh(x: float) -> float
export extern func tanh(x: float) -> float

export extern func sinh(x: double) -> double
export extern func cosh(x: double) -> double
export extern func tanh(x: double) -> double

export extern func pow(x: float, y: int) -> float
export extern func pow(x: float, y: float) -> float
export extern func pow(x: double, y: int) -> double
export extern func pow(x: double, y: double) -> double

export extern func sqrt(x: float) -> float
export extern func sqrt(x: double) -> double

export extern func cbrt(x: float) -> float
export extern func cbrt(x: double) -> double

export extern func log(x: float) -> float
export extern func log(x: double) -> double

export extern func exp(x: float) -> float
export extern func exp(x: double) -> double

export let module.pi = acos(-1.0)
export let module.pi_f = acos(-1.0f)

func min<T : orderable>(a: T) => a
func max<T : orderable>(a: T) => a

export func min<T : orderable>(a, b, ...rest: T) => min(a < b ? a : b, ...rest)
export func max<T : orderable>(a, b, ...rest: T) => max(a < b ? b : a, ...rest)

export func lerp(v0, v1, t: float) => (1 - t) * v0 + t * v1
export func lerp(v0, v1, t: double) => (1 - t) * v0 + t * v1

