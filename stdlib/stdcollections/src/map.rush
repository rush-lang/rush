export class hash_map<TKey : hashable, TVal>
public
   get keys -> iterable<TKey> => noop
   get values -> iterable<TVal> => noop

   operator this[key: TKey] -> TVal
      get => noop
      set => noop

   construct => this(iterable<(TKey, TVal)>.empty())
   construct (source: iterable<(TKey, TVal)>)
   construct (source: iterable<{ key: TKey, value: TVal }>)
      => this(source.map({key, value} => (key, value)))

   func clear() => noop

   func remove(key: TKey) => noop
   func insert(key: TKey, value: TVal) -> bool => noop

   implements iterable<(key: TKey, value: TVal)>
      func iterator() => new hash_map_iterator<(key: TKey, value: TVal)>(this)


export class multi_map<TKey : hashable, TVal>
public
   get keys -> iterable<TKey> => noop
   get values -> iterable<TVal> => noop

   get this[key: TKey] -> TVal => noop

   construct => this(iterable<(TKey, TVal)>.empty())
   construct(source: iterable<(TKey, TVal)>) => noop
   construct (source: iterable<{ key: TKey, value: TVal }>)
      => this(source.map({key, value} => (key, value)))

   func clear() => noop

   func remove(key: TKey) => noop
   func remove(key: TKey, value: TVal) where TVal : equatable => noop

   func insert(key: TKey, value: TVal) => noop

   implements iterable<(key: TKey, value: [TVal])>
      func iterator() => new multi_map_iterator<(key: TKey, value: [TVal])>(this)
