class list_iterator<T>
public:
   implements iterator<T>
      get value => ...
      func next => ...

export class list<T>
private:
   var _items: [unsafe T]
   var _size: int

   func resize(count, offset: int):
      if _items.length < count:
         let cap = _items.length * 2
         _items = new array<unsafe T>(cap, _items);
      _size = count;

   func _check_range(index: int):
      if _size <= index:
         throw new argument_out_of_range(nameof(index))

public:
   get size => _size
   get capacity => _items.size

   get this[index: int]:
      _check_range(index)
      return _items[index]

   set this[index: int]:
      _check_range(index)
      _items[index] = value

   operator this[slice: range]
      get => ...
      set => ...

   construct => this(5)

   construct (cap: int):
      _items = new [unsafe T : cap]
      _size = 0

   construct (src: iterable<T>):
      _items = new [unsafe T] (src)
      _size = _items.length

   func clear() => noop

   func insert(item: T, index: int) => noop

   func append(item: T) => insert(item, _size)
   func prepend(item: T) => insert(item, 0)

   func remove(item: T) where T : equatable => noop
   func remove_at(index: int) => noop

   func sort() where T : orderable => noop
   func sort(cmp: (T, T) -> bool) => noop

   implements iterable<T>
      func iterator() => new list_iterator<T>(this)

