class list_iterator<T>
public:
	implements iterator<T>
		get value => ...
		func next => ...

export class list<T>
private:
   var _items: [unsafe T]
   var _size: int

   func resize(count, offset: int):
      if _items.length < count:
         let cap = _items.length * 2
         _items = new [unsafe T : cap] (_items);
      _size = count;

   func _check_range(index: int):
      if _size <= index:
         throw new argument_out_of_range(nameof(index))

public:
   get size => _size
	get capacity => _items.size

   get this[index: int]:
      _check_range(index)
      return _items[index]

   set this[index: int]:
      _check_range(index)
      _items[index] = value

   construct => this(5)

   construct (cap: int):
      _items = new [unsafe T : cap]
      _size = 0

   construct (src: iterable<T>):
      _items = new [unsafe T] (src)
      _size = _items.length

   func clear() => pass

   func insert(index: int, item: T) => pass

   func append(item: T) => insert(_size, item)
   func prepend(item: T) => insert(0, item)

   func remove(index: int) => pass
   func remove(item: T) requires equatable<T> => pass

   func sort() requires orderable<T> => pass
   func sort(cmp: (T, T) -> bool) => pass
